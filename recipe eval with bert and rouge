import tkinter as tk
from tkinter import filedialog, messagebox
import torch
from transformers import AutoTokenizer, AutoModel
from rouge_score import rouge_scorer

tokenizer = AutoTokenizer.from_pretrained("bert-base-multilingual-cased")
model = AutoModel.from_pretrained("bert-base-multilingual-cased")

def read_file(filepath):
    with open(filepath, "r", encoding="utf-8") as file:
        return file.read()


def compute_bert_score(reference, generated):
    with torch.no_grad():
        ref_tokens = tokenizer(reference, return_tensors="pt", padding=True, truncation=True)
        gen_tokens = tokenizer(generated, return_tensors="pt", padding=True, truncation=True)
        ref_embedding = model(**ref_tokens).last_hidden_state.mean(dim=1)
        gen_embedding = model(**gen_tokens).last_hidden_state.mean(dim=1)
        similarity = torch.nn.functional.cosine_similarity(ref_embedding, gen_embedding)
    return similarity.item()


def compute_rouge(reference, generated):
    scorer = rouge_scorer.RougeScorer(["rouge1", "rouge2", "rougeL"], use_stemmer=True)
    scores = scorer.score(reference, generated)
    return {key: scores[key].fmeasure for key in scores}


def evaluate():
    if not ref_file or not gen_file:
        messagebox.showerror("Fehler", "Bitte beide Dateien hochladen!")
        return

    reference_text = read_file(ref_file)
    generated_text = read_file(gen_file)

    bert_score = compute_bert_score(reference_text, generated_text)

    rouge_scores = compute_rouge(reference_text, generated_text)

    result_text = f"BERTScore: {bert_score:.4f}\n"
    result_text += f"ROUGE-1: {rouge_scores['rouge1']:.4f}\n"
    result_text += f"ROUGE-2: {rouge_scores['rouge2']:.4f}\n"
    result_text += f"ROUGE-L: {rouge_scores['rougeL']:.4f}"

    result_display.config(state="normal")
    result_display.delete("1.0", tk.END)
    result_display.insert("1.0", result_text)
    result_display.config(state="disabled")


def upload_ref():
    global ref_file
    ref_file = filedialog.askopenfilename(filetypes=[("Textdateien", "*.txt")])
    ref_label.config(text=f"Referenz: {ref_file}")
def upload_gen():
    global gen_file
    gen_file = filedialog.askopenfilename(filetypes=[("Textdateien", "*.txt")])
    gen_label.config(text=f"Generiertes Rezept: {gen_file}")

root = tk.Tk()
root.title("Rezept Evaluierung")
root.geometry("500x400")

tk.Label(root, text="Upload Referenz-Rezept:").pack(anchor="w", padx=10)
ref_label = tk.Label(root, text="Noch keine Datei hochgeladen", fg="gray")
ref_label.pack(anchor="w", padx=10)
tk.Button(root, text="Datei auswählen", command=upload_ref).pack(anchor="w", padx=10)

tk.Label(root, text="Upload Generiertes Rezept:").pack(anchor="w", padx=10)
gen_label = tk.Label(root, text="Noch keine Datei hochgeladen", fg="gray")
gen_label.pack(anchor="w", padx=10)
tk.Button(root, text="Datei auswählen", command=upload_gen).pack(anchor="w", padx=10)

tk.Button(root, text="Evaluieren", command=evaluate, bg="green", fg="white").pack(anchor="w", padx=10, pady=10)

result_display = tk.Text(root, height=5, width=50, wrap="word")
result_display.pack(anchor="w", padx=10, pady=10)
result_display.config(state="disabled")

root.mainloop()
